name: Docker Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mycelia

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Navigator image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/navigator/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/navigator:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Public Directory image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/public-directory/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/public-directory:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Radio SFU image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/radio-sfu/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/radio-sfu:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-services:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services for testing
        run: |
          docker compose -f deploy/docker-compose.yml up -d --build
          
          # Wait for services to be ready
          timeout 300 bash -c 'until curl -f http://localhost:3000/status.json; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3002/health; do sleep 5; done'

      - name: Run service tests
        run: |
          # Test Navigator
          curl -f http://localhost:3000/status.json
          
          # Test Public Directory
          curl -f http://localhost:3001/health
          
          # Test Radio SFU
          curl -f http://localhost:3002/health
          
          # Test IPFS
          curl -f http://localhost:5001/api/v0/version

      - name: Cleanup
        if: always()
        run: |
          docker compose -f deploy/docker-compose.yml down -v

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          # This could include:
          # - Updating Kubernetes manifests
          # - Triggering staging deployment pipeline
          # - Running smoke tests
          # - Notifying team

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/navigator:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'